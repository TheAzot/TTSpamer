import asyncio
import os
from dataclasses import dataclass, field
from datetime import datetime
from typing import Dict, List, Any
from loguru import logger
from playwright.async_api import async_playwright, Page
from playwright_stealth import stealth_async, StealthConfig
from tiktok_captcha_solver import AsyncPlaywrightSolver


@dataclass
class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∫—Ä–∏–ø—Ç–∞"""
    sadcaptcha_api_key: str = "SADCAPCHA_API_KEY"

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    accounts_filename: str = "acc.txt"
    output_dir: str = "accounts"
    log_filename: str = "tiktok_checker.log"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–∞—É–∑–µ—Ä–∞
    max_browsers: int = 10
    browser_headless: bool = False
    max_check_attempts: int = 1

    # –¢–∞–π–º–∞—É—Ç—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    page_timeout: int = 3
    action_delay: float = 0.5
    comment_delay: float = 1.0

    # –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
    enable_commenting: bool = True
    enable_reply_commenting: bool = True
    enable_liking: bool = True
    enable_next_video: bool = True

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∞–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    enable_comment_loop: bool = True  # –í–∫–ª—é—á–∏—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    comment_loop_count: int = 0  # 0 = –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, >0 = –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤
    comment_loop_delay: int = 1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)

    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    comment_text: str = "–ú–∞–ª—å—á–∏–∫–∏, –æ—Ü–µ–Ω–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—éüòÖüçë"
    comment_texts: List[str] = field(default_factory=list)

    # –†–µ–∂–∏–º "–≤–∏—Å–µ–Ω–∏—è" –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    enable_hanging: bool = True
    hang_check_interval: int = 60  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ —Ä–µ–∂–∏–º–µ –≤–∏—Å–µ–Ω–∏—è

    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    browser_args: List[str] = field(default_factory=lambda: [
        '--no-sandbox',
        '--disable-gpu',
        '--disable-dev-shm-usage',
        '--disable-extensions',
        '--disable-setuid-sandbox',
        '--disable-infobars',
        '--disable-web-security',
        '--disable-features=IsolateOrigins,site-per-process',
        '--disable-site-isolation-trials',
        '--ignore-certificate-errors',
        '--disable-accelerated-2d-canvas',
        '--disable-browser-side-navigation',
        '--disable-default-apps',
        '--no-first-run'
    ])

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    browser_context_options: Dict[str, Any] = field(default_factory=lambda: {
        'viewport': {'width': 1260, 'height': 700},
        'user_agent': "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
        'ignore_https_errors': True,
        'java_script_enabled': True,
    })

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è stealth-—Ä–µ–∂–∏–º–∞
    stealth_config: Dict[str, bool] = field(default_factory=lambda: {
        'navigator_languages': False,
        'navigator_vendor': False,
        'navigator_user_agent': False
    })


class Stats:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º"""

    def __init__(self):
        self.counters = {
            'total_accounts': 0,
            'processed': 0,
            'successful': 0,
            'failed': 0,
            'errors': 0,
            'comments': 0,
            'replies': 0,
            'likes': 0,
            'next_videos': 0,
            'comment_loops': 0,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'comments_per_video': {},  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –Ω–∞ –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ
        }
        self.start_time = datetime.now()
        self.lock = asyncio.Lock()

    async def increment(self, key: str, value: int = 1):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫"""
        async with self.lock:
            self.counters[key] = self.counters.get(key, 0) + value

    async def get_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        async with self.lock:
            runtime = datetime.now() - self.start_time
            report = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            report += f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime}\n"
            report += f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.counters['processed']}/{self.counters['total_accounts']} | "
            report += f"–£—Å–ø–µ—à–Ω–æ: {self.counters['successful']} | "
            report += f"–ù–µ—É—Å–ø–µ—à–Ω–æ: {self.counters['failed']} | "
            report += f"–û—à–∏–±–∫–∏: {self.counters['errors']}\n"

            if any(self.counters.get(k, 0) > 0 for k in ['comments', 'replies', 'likes', 'next_videos']):
                report += f"–î–µ–π—Å—Ç–≤–∏—è: "
                report += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {self.counters.get('comments', 0)} | "
                report += f"–û—Ç–≤–µ—Ç—ã: {self.counters.get('replies', 0)} | "
                report += f"–õ–∞–π–∫–∏: {self.counters.get('likes', 0)} | "
                report += f"–ü–µ—Ä–µ—Ö–æ–¥—ã: {self.counters.get('next_videos', 0)}"

            if self.counters.get('comment_loops', 0) > 0:
                report += f"\n–¶–∏–∫–ª—ã –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {self.counters.get('comment_loops', 0)}"

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–µ–æ
            if self.counters.get('comments_per_video', {}):
                report += "\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–µ–æ:"
                for video_id, count in self.counters.get('comments_per_video', {}).items():
                    report += f"\n - {video_id}: {count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"

            return report


class FileHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""

    def __init__(self, config: Config):
        self.config = config
        os.makedirs(config.output_dir, exist_ok=True)

    def save_account(self, email: str, password: str, cookies: List[Dict]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç"""
        safe_filename = f"{self.config.output_dir}/{email.replace(':', '_')}.txt"

        try:
            with open(safe_filename, 'w', encoding='utf-8') as f:
                f.write(f"{email}:{password}\n")
                f.write("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ - —Å–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è")

            logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {email} - –í–ê–õ–ò–î–ù–´–ô ‚úì | –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {safe_filename}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {email}: {type(e).__name__}: {str(e)}")
            return False

    def read_accounts(self) -> List[Dict]:
        """–ß–∏—Ç–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        accounts = []
        try:
            with open(self.config.accounts_filename, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if ':' in line:
                        email, password = line.split(':', 1)
                        accounts.append({'email': email, 'password': password})
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ {self.config.accounts_filename}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ {self.config.accounts_filename}: {type(e).__name__}: {str(e)}")
        return accounts


class TikTokActions:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ TikTok"""

    def __init__(self, page: Page, config: Config, stats: Stats):
        self.page = page
        self.config = config
        self.stats = stats
        self.current_video_id = "unknown"  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        import random
        self.random = random

    def get_comment_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞—è –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å"""
        if self.config.comment_texts:
            return self.random.choice(self.config.comment_texts)
        return self.config.comment_text

    async def update_video_id(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É—è URL –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å ID –≤–∏–¥–µ–æ –∏–∑ URL –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            current_url = self.page.url
            if "video/" in current_url:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∏–¥–µ–æ –∏–∑ URL
                self.current_video_id = current_url.split("video/")[1].split("?")[0]
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π ID
                self.current_video_id = f"video_{datetime.now().strftime('%H%M%S')}"

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if self.current_video_id not in self.stats.counters['comments_per_video']:
                self.stats.counters['comments_per_video'][self.current_video_id] = 0

        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –≤–∏–¥–µ–æ: {e}")
            self.current_video_id = f"unknown_{datetime.now().strftime('%H%M%S')}"

    async def post_comment(self, email: str) -> bool:
        """–û—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ —Ç–µ–∫—É—â–∏–º –≤–∏–¥–µ–æ"""
        if not self.config.enable_commenting:
            return False

        try:
            await self.update_video_id()

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–ï–†–í–û–ï –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            comment_input = self.page.locator('div[data-e2e="comment-input"]').first
            await comment_input.click()
            await asyncio.sleep(self.config.action_delay)

            comment_text = self.get_comment_text()
            await self.page.keyboard.type(comment_text)
            await asyncio.sleep(self.config.action_delay)
            await self.page.keyboard.press('Enter')
            await asyncio.sleep(self.config.comment_delay)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.stats.increment('comments')
            self.stats.counters['comments_per_video'][self.current_video_id] = self.stats.counters[
                                                                                   'comments_per_video'].get(
                self.current_video_id, 0) + 1

            logger.success(
                f"–£—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è {email} (–í–∏–¥–µ–æ: {self.current_video_id}, #{self.stats.counters['comments_per_video'][self.current_video_id]})")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {type(e).__name__}: {str(e)}")
            return False

    async def reply_to_comment(self, email: str) -> bool:
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        if not self.config.enable_reply_commenting:
            return False

        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            reply_button = self.page.locator('span[data-e2e="comment-reply-1"]').first
            await reply_button.click()
            await asyncio.sleep(self.config.comment_delay)

            # –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –∏—Å–ø–æ–ª—å–∑—É–µ–º –ü–û–°–õ–ï–î–ù–ï–ï –ø–æ–ª–µ –≤–≤–æ–¥–∞ (–∫–æ—Ç–æ—Ä–æ–µ –ø–æ—è–≤–∏–ª–æ—Å—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞)
            reply_input = self.page.locator('div[data-e2e="comment-input"]').last
            await reply_input.click()
            await asyncio.sleep(self.config.action_delay)

            comment_text = self.get_comment_text()
            await self.page.keyboard.type(comment_text)
            await asyncio.sleep(self.config.action_delay)

            await self.page.keyboard.press('Enter')
            await asyncio.sleep(self.config.comment_delay)

            logger.success(f"–£—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è {email}")
            await self.stats.increment('replies')
            return True
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {type(e).__name__}: {str(e)}")
            return False

    async def post_comment(self, email: str) -> bool:
        """–û—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ —Ç–µ–∫—É—â–∏–º –≤–∏–¥–µ–æ"""
        if not self.config.enable_commenting:
            return False

        try:
            await self.update_video_id()

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–ï–†–í–û–ï –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            comment_input = self.page.locator('div[data-e2e="comment-input"]').first
            await comment_input.click()
            await asyncio.sleep(self.config.action_delay)

            comment_text = self.get_comment_text()
            await self.page.keyboard.type(comment_text)
            await asyncio.sleep(self.config.action_delay)
            await self.page.keyboard.press('Enter')
            await asyncio.sleep(self.config.comment_delay)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.stats.increment('comments')
            self.stats.counters['comments_per_video'][self.current_video_id] = self.stats.counters[
                                                                                   'comments_per_video'].get(
                self.current_video_id, 0) + 1

            logger.success(
                f"–£—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è {email} (–í–∏–¥–µ–æ: {self.current_video_id}, #{self.stats.counters['comments_per_video'][self.current_video_id]})")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {type(e).__name__}: {str(e)}")
            return False

    async def like_video(self, email: str) -> bool:
        """–°—Ç–∞–≤–∏—Ç –ª–∞–π–∫ —Ç–µ–∫—É—â–µ–º—É –≤–∏–¥–µ–æ"""
        if not self.config.enable_liking:
            return False

        try:
            like_button_browse = self.page.locator('strong[data-e2e="browse-like-count"]').first
            like_button_standard = self.page.locator('strong[data-e2e="like-count"]').first

            if await like_button_browse.count() > 0:
                logger.info("–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ browse-like-count")
                await like_button_browse.click()
                await asyncio.sleep(self.config.action_delay)
                logger.success(f"–£—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫ (browse-like-count) –¥–ª—è {email}")
                await self.stats.increment('likes')
                return True
            elif await like_button_standard.count() > 0:
                logger.info("–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ like-count")
                await like_button_standard.click()
                await asyncio.sleep(self.config.action_delay)
                logger.success(f"–£—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫ (like-count) –¥–ª—è {email}")
                await self.stats.increment('likes')
                return True
            else:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞")
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∞–π–∫–∞: {type(e).__name__}: {str(e)}")
            return False

    async def next_video(self, email: str, captcha_solver) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–∏–¥–µ–æ"""
        if not self.config.enable_next_video:
            return False

        try:
            logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ –¥–ª—è {email}")

            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ data-e2e="arrow-right"
            next_video_button = self.page.locator('button[data-e2e="arrow-right"]')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
            if await next_video_button.count() > 0:
                await next_video_button.click()
                await asyncio.sleep(self.config.action_delay)
                logger.success(f"–£—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ –¥–ª—è {email}")
                await self.stats.increment('next_videos')
                await captcha_solver.solve_captcha_if_present()
                await self.update_video_id()  # –û–±–Ω–æ–≤–ª—è–µ–º ID –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
                return True
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ CSS –∫–ª–∞—Å—Å—É, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–± –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                next_video_button_alt = self.page.locator('.css-1s9jpf8-ButtonBasicButtonContainer-StyledVideoSwitch')
                if await next_video_button_alt.count() > 0:
                    await next_video_button_alt.click()
                    await asyncio.sleep(self.config.action_delay)
                    logger.success(f"–£—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ (–ø–æ CSS –∫–ª–∞—Å—Å—É) –¥–ª—è {email}")
                    await self.stats.increment('next_videos')
                    await self.update_video_id()  # –û–±–Ω–æ–≤–ª—è–µ–º ID –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
                    await captcha_solver.solve_captcha_if_present()

                    return True
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ")
                    return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ: {type(e).__name__}: {str(e)}")
            return False

    async def run_comment_loop(self, email: str, captcha_solver):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if not self.config.enable_comment_loop:
            return

        loop_count = 0
        max_loops = self.config.comment_loop_count
        comments_opened = False

        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
            try:
                comments_section = self.page.locator('div[data-e2e="comment-input"]')
                if await comments_section.count() == 0:
                    comments_button = self.page.locator('span[data-e2e="comment-icon"]').first
                    await comments_button.click()
                    await captcha_solver.solve_captcha_if_present()
                    await asyncio.sleep(self.config.comment_delay)
                    comments_opened = True
                    logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è {email}")
                else:
                    comments_opened = True
                    logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è {email}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
                return

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            while max_loops == 0 or loop_count < max_loops:
                # –°–ù–ê–ß–ê–õ–ê –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
                if self.config.enable_reply_commenting:
                    try:
                        reply_success = await self.reply_to_comment(email)
                        if reply_success:
                            logger.success(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ü–∏–∫–ª–µ {loop_count + 1}")
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {type(e).__name__}: {str(e)}")

                # –ó–ê–¢–ï–ú –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                comment_success = await self.post_comment(email)

                if comment_success:
                    loop_count += 1
                    await self.stats.increment('comment_loops')
                    logger.info(
                        f"–¶–∏–∫–ª –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {loop_count}{' –∏–∑ ' + str(max_loops) if max_loops > 0 else ''} –∑–∞–≤–µ—Ä—à–µ–Ω")

                    # –°—Ç–∞–≤–∏–º –ª–∞–π–∫, –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
                    if self.config.enable_liking:
                        await self.like_video(email)

                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
                    if self.config.enable_next_video:
                        next_success = await self.next_video(email, captcha_solver)
                        if not next_success:
                            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–∏–¥–µ–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º")

                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                    if max_loops == 0 or loop_count < max_loops:
                        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {self.config.comment_loop_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º")
                        await asyncio.sleep(self.config.comment_loop_delay)
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ü–∏–∫–ª–µ {loop_count + 1}")
                    # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ
                    if await self.next_video(email, captcha_solver):
                        logger.info("–ü–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    else:
                        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                        break

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {type(e).__name__}: {str(e)}")

        logger.info(f"–¶–∏–∫–ª –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {self.stats.counters['comments']}")

class TikTokChecker:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ TikTok"""

    def __init__(self, config: Config, stats: Stats):
        self.config = config
        self.stats = stats
        self.file_handler = FileHandler(config)
        self.successful_logins = []  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä

    async def check_account(self, account: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç TikTok"""
        email = account['email']
        password = account['password']

        for attempt in range(1, self.config.max_check_attempts + 1):
            if attempt > 1:
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{self.config.max_check_attempts} –¥–ª—è {email}")

            browser = None
            context = None

            try:
                async with async_playwright() as p:
                    browser = await p.chromium.launch(
                        headless=self.config.browser_headless,
                        args=self.config.browser_args
                    )

                    context = await browser.new_context(**self.config.browser_context_options)
                    context.set_default_timeout(self.config.page_timeout * 1000)

                    page = await context.new_page()

                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ stealth
                    config = StealthConfig(**self.config.stealth_config)
                    await stealth_async(page, config)

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–∞—Ç–µ–ª—è –∫–∞–ø—á–∏
                    captcha_solver = AsyncPlaywrightSolver(
                        page=page,
                        sadcaptcha_api_key=self.config.sadcaptcha_api_key,
                        mouse_step_size=2,
                        mouse_step_delay_ms=5
                    )

                    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞
                    await page.goto('https://www.tiktok.com/login/phone-or-email/email')
                    await asyncio.sleep(self.config.action_delay)

                    # –õ–æ–∫–∞—Ç–æ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
                    email_input = page.locator('input[type="text"]')
                    password_input = page.locator('input[type="password"]')
                    login_button = page.locator('button[data-e2e="login-button"], button[type="submit"]')

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
                    if await email_input.count() == 0 or await password_input.count() == 0 or await login_button.count() == 0:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –¥–ª—è {email}")
                        continue

                    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
                    await email_input.fill(email)
                    await asyncio.sleep(self.config.action_delay)
                    await password_input.fill(password)
                    await asyncio.sleep(self.config.action_delay)

                    # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
                    await login_button.click()
                    await asyncio.sleep(self.config.action_delay)

                    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É
                    try:
                        await captcha_solver.solve_captcha_if_present()
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏: {type(e).__name__}: {str(e)}")
                        pass

                    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞
                    await asyncio.sleep(8)

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    try:
                        verification_code = page.locator('.verification-code-input, input[name="verifyCode"]')
                        if await verification_code.count() > 0:
                            logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {email} —Ç—Ä–µ–±—É–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                            await self.stats.increment('failed')
                            return False
                    except Exception:
                        pass

                    current_url = page.url
                    if "login" in current_url:
                        logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {email} - –ù–ï–í–ê–õ–ò–î–ù–´–ô ‚úó")
                        await self.stats.increment('failed')
                        return False

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
                    success = self.file_handler.save_account(email, password, [])

                    if success:
                        logger.success(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç {email}")
                        await self.stats.increment('successful')

                        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ TikTok
                        actions = TikTokActions(page, self.config, self.stats)

                        try:
                            # –î–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–∂–µ–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫
                            if self.config.enable_liking:
                                await actions.like_video(email)

                            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
                            if self.config.enable_comment_loop:
                                logger.info(f"–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {email}")
                                await actions.run_comment_loop(email, captcha_solver)
                            else:
                                # –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ —Ü–∏–∫–ª–æ–≤
                                comments_button = page.locator('span[data-e2e="comment-icon"]').first
                                await comments_button.click()
                                await captcha_solver.solve_captcha_if_present()
                                await asyncio.sleep(self.config.comment_delay)

                                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                                await actions.reply_to_comment(email)

                                # –û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                                await actions.post_comment(email)

                                # –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–∏–¥–µ–æ
                                await actions.next_video(email, captcha_solver)

                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è {email}: {type(e).__name__}: {str(e)}")

                        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö
                        try:
                            report = await self.stats.get_report()
                            logger.info(f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π:\n{report}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è "–≤–∏—Å–µ–Ω–∏—è"
                        if self.config.enable_hanging:
                            self.successful_logins.append((browser, context))
                            return True
                        else:
                            await context.close()
                            await browser.close()
                            return True

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {email}: {type(e).__name__}: {str(e)}")

                if browser and not context:
                    try:
                        await browser.close()
                    except:
                        pass

                if attempt == self.config.max_check_attempts:
                    logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {email} - –û–®–ò–ë–ö–ê ‚úó")
                    await self.stats.increment('errors')
                    return False

                await asyncio.sleep(1)

        return False


class AccountProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    def __init__(self, accounts: List[Dict], config: Config):
        self.accounts = accounts
        self.config = config
        self.stats = Stats()
        self.checker = TikTokChecker(config, self.stats)
        self.next_index = 0
        self.lock = asyncio.Lock()

    async def worker(self, worker_id: int, semaphore: asyncio.Semaphore):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        while True:
            async with self.lock:
                if self.next_index >= len(self.accounts):
                    break

                account_index = self.next_index
                self.next_index += 1
                current_account = self.accounts[account_index]
                current_account['index'] = account_index + 1

            async with semaphore:
                email = current_account['email']
                logger.info(f"[{account_index + 1}/{len(self.accounts)}] –ü—Ä–æ–≤–µ—Ä–∫–∞ {email}")

                try:
                    await self.checker.check_account(current_account)

                    async with self.lock:
                        await self.stats.increment('processed')

                        if self.stats.counters['processed'] % 5 == 0 or self.stats.counters['processed'] == len(
                                self.accounts):
                            report = await self.stats.get_report()
                            logger.info(report)

                except Exception as e:
                    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {email}: {type(e).__name__}: {str(e)}")
                    async with self.lock:
                        await self.stats.increment('processed')
                        await self.stats.increment('errors')

    async def process_all(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""
        if not self.accounts:
            logger.warning("–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await self.stats.increment('total_accounts', len(self.accounts))

        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É {len(self.accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        semaphore = asyncio.Semaphore(self.config.max_browsers)

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        tasks = []
        for worker_id in range(min(self.config.max_browsers, len(self.accounts))):
            task = asyncio.create_task(self.worker(worker_id + 1, semaphore))
            tasks.append(task)

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        await asyncio.gather(*tasks)

        report = await self.stats.get_report()
        logger.success("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.success(report)

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º "–≤–∏—Å—è—â–∏–µ" —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if self.checker.successful_logins and self.config.enable_hanging:
            logger.info(
                f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ {len(self.checker.successful_logins)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –°–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è...")
            try:
                while True:
                    logger.info("–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É... –°–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã.")
                    await asyncio.sleep(self.config.hang_check_interval)
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã...")
                for browser, context in self.checker.successful_logins:
                    try:
                        await context.close()
                        await browser.close()
                    except:
                        pass


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    logger.remove()
    logger.add("tiktok_checker.log", rotation="10 MB", level="INFO")
    logger.add(
        lambda msg: print(msg, end=""),
        colorize=True,
        level="INFO",
        format="{time:HH:mm:ss} | <level>{message}</level>"
    )

    logger.info("=" * 60)
    logger.info("Th - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    logger.info("=" * 60)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = Config()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    file_handler = FileHandler(config)
    accounts = file_handler.read_accounts()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    processor = AccountProcessor(accounts, config)
    await processor.process_all()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
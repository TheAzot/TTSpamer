import asyncio
import random
import os
from datetime import datetime
import traceback
from typing import List, Dict
import json

from playwright.async_api import async_playwright
from playwright_stealth import stealth_async, StealthConfig
from tiktok_captcha_solver import AsyncPlaywrightSolver
from loguru import logger


class BotConfig:
    """–ï–¥–∏–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""

    def __init__(self, config_path='config.json'):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(config_path):
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    self.__dict__.update(config)
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {config_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
                self._set_defaults()
        else:
            self._set_defaults()
            self.save(config_path)

    def _set_defaults(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.sadcaptcha_api_key = "API_KEY" # https://www.sadcaptcha.com
        self.max_login_attempts = 3
        self.headless = False # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä \ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä

        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        self.accounts_file = "acc.txt"
        self.comments_file = "comments.txt"
        self.proxies_file = "proxies.txt"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ (—É–º–µ–Ω—å—à–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–ø—Ä–æ—Å—É)
        self.min_delay = 0.5
        self.max_delay = 1.0
        self.login_delay = 1.0

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–∏–∫–ª–æ–≤
        self.cycles_per_account = 10
        self.min_next_clicks = 1
        self.max_next_clicks = 3

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏
        self.max_concurrent_accounts = 3

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        self.proxy_type = "http"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º http, –Ω–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ config.json

    def save(self, config_path='config.json'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(self.__dict__, f, indent=4, ensure_ascii=False)
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {config_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def random_delay(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        return random.uniform(self.min_delay, self.max_delay)


class FileHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""

    def __init__(self, config: BotConfig):
        self.config = config

    def read_accounts(self) -> List[Dict[str, str]]:
        """–ß—Ç–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        accounts = []
        try:
            with open(self.config.accounts_file, 'r', encoding='utf-8') as f:
                for line in f:
                    if ':' in line:
                        email, password = line.strip().split(':', 1)
                        accounts.append({'email': email, 'password': password})
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return accounts

    def read_comments(self) -> List[str]:
        """–ß—Ç–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        comments = []
        try:
            with open(self.config.comments_file, 'r', encoding='utf-8') as f:
                comments = [line.strip() for line in f if line.strip()]
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            comments = [
                "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω —Å –≤–∞–º–∏! üëç",
                "–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è!",
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! üòä",
                "–í—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤—ã!",
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–∞–∫! üíØ",
                "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é!",
                "–û—Ç–ª–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! üëè",
                "–°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –≤—Å–µ 100%",
                "–¢–∞–∫ —Ç–æ—á–Ω–æ —Å–∫–∞–∑–∞–Ω–æ! üëå",
                "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –ø–æ–¥–º–µ—á–µ–Ω–æ!"
            ]
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º {len(comments)} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        return comments

    def read_proxies(self) -> List[Dict[str, str]]:
        """–ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
        proxies = []
        try:
            with open(self.config.proxies_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line:
                        parts = line.split(':')

                        # –§–æ—Ä–º–∞—Ç: ip:port:username:password
                        if len(parts) >= 4:
                            proxy = {
                                'server': f"{self.config.proxy_type}://{parts[0]}:{parts[1]}",
                                'username': parts[2],
                                'password': parts[3]
                            }
                            proxies.append(proxy)

                        # –§–æ—Ä–º–∞—Ç: ip:port
                        elif len(parts) == 2:
                            proxy = {
                                'server': f"{self.config.proxy_type}://{parts[0]}:{parts[1]}"
                            }
                            proxies.append(proxy)

            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏")
        except FileNotFoundError:
            logger.warning(f"–§–∞–π–ª –ø—Ä–æ–∫—Å–∏ '{self.config.proxies_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
        return proxies


class TikTokBot:
    """–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ TikTok —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏ –∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏"""

    def __init__(self, config: BotConfig = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.config = config or BotConfig()
        self.file_handler = FileHandler(self.config)
        self.comments = self.file_handler.read_comments()
        self.proxies = self.file_handler.read_proxies()

    async def setup_browser(self, proxy_config=None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)"""
        p = await async_playwright().start()

        browser_args = ['--no-sandbox', '--disable-gpu']

        browser = await p.chromium.launch(
            headless=self.config.headless,
            args=browser_args
        )

        context_options = {
            "viewport": {'width': 1920, 'height': 1080}
        }

        if proxy_config:
            context_options["proxy"] = proxy_config

        context = await browser.new_context(**context_options)
        page = await context.new_page()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–µ–ª—Å-—Ä–µ–∂–∏–º–∞
        config = StealthConfig(
            navigator_languages=False,
            navigator_vendor=False,
            navigator_user_agent=False
        )
        await stealth_async(page, config)

        return p, browser, context, page

    async def login(self, account, proxy=None):
        """–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç TikTok —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏"""
        current_attempt = 1
        while current_attempt <= self.config.max_login_attempts:
            playwright = None
            browser = None

            try:
                logger.info(f"–í—Ö–æ–¥: {account['email']} (–ø–æ–ø—ã—Ç–∫–∞ {current_attempt}/{self.config.max_login_attempts})")

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
                playwright, browser, context, page = await self.setup_browser(proxy)

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–∞—Ç–µ–ª—è –∫–∞–ø—á–∏
                sadcaptcha = AsyncPlaywrightSolver(
                    page=page,
                    sadcaptcha_api_key=self.config.sadcaptcha_api_key,
                    mouse_step_size=1,
                    mouse_step_delay_ms=10
                )

                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
                await page.goto('https://www.tiktok.com/login/phone-or-email/email')
                await asyncio.sleep(self.config.login_delay)

                await page.locator('input[type="text"]').fill(account['email'])
                await asyncio.sleep(self.config.min_delay)
                await page.locator('input[type="password"]').fill(account['password'])
                await asyncio.sleep(self.config.min_delay)

                # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
                await page.locator('button[data-e2e="login-button"], button[type="submit"]').click()
                await asyncio.sleep(self.config.login_delay)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏
                await sadcaptcha.solve_captcha_if_present()
                await asyncio.sleep(self.config.login_delay)
                await sadcaptcha.solve_captcha_if_present()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
                if not "login" in page.url:
                    proxy_info = f" (–ü—Ä–æ–∫—Å–∏: {proxy['server']})" if proxy else ""
                    logger.success(f"‚úì –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: {account['email']}{proxy_info}")
                    return {
                        "playwright": playwright,
                        "browser": browser,
                        "context": context,
                        "page": page,
                        "sadcaptcha": sadcaptcha,
                        "account": account,
                        "proxy": proxy
                    }
                else:
                    logger.warning(f"–ù–µ—É–¥–∞—á–Ω—ã–π –≤—Ö–æ–¥: {account['email']}")
                    await browser.close()
                    await playwright.stop()
                    current_attempt += 1

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ {account['email']}: {e}")
                if browser:
                    await browser.close()
                if playwright:
                    await playwright.stop()
                current_attempt += 1

        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏: {account['email']} –ø–æ—Å–ª–µ {self.config.max_login_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return None

    async def process_videos(self, session_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ TikTok - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            page = session_data["page"]
            sadcaptcha = session_data["sadcaptcha"]
            account = session_data["account"]
            proxy_info = f" (–ü—Ä–æ–∫—Å–∏: {session_data['proxy']['server']})" if 'proxy' in session_data and session_data[
                'proxy'] else ""

            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account['email']}{proxy_info}")

            for cycle in range(1, self.config.cycles_per_account + 1):
                logger.info(f"–¶–∏–∫–ª #{cycle} - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É For You")

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É For You
                await page.goto("https://www.tiktok.com/foryou", timeout=60000)
                await asyncio.sleep(self.config.random_delay())

                # –†–µ—à–∞–µ–º –∫–∞–ø—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
                await sadcaptcha.solve_captcha_if_present()

                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                try:
                    await page.screenshot(path=f"{account['email'].split('@')[0]}_cycle_{cycle}_foryou.png")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")

                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –≤ –ª–µ–Ω—Ç–µ
                logger.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –≤ –ª–µ–Ω—Ç–µ")
                await self._open_first_video(page)
                await asyncio.sleep(self.config.random_delay())

                # –†–µ—à–∞–µ–º –∫–∞–ø—á—É –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∏–¥–µ–æ
                await sadcaptcha.solve_captcha_if_present()

                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                logger.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...")
                comments_opened = await self._open_comments(page)

                if comments_opened:
                    logger.success("‚úì –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã")
                    await asyncio.sleep(self.config.random_delay())

                    # –†–µ—à–∞–µ–º –∫–∞–ø—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
                    await sadcaptcha.solve_captcha_if_present()

                    # 1. –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    logger.info("–û—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
                    comment_text = random.choice(self.comments)
                    comment_success = await self._post_comment(page, comment_text)

                    if comment_success:
                        logger.success(f"‚úì –£—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{comment_text}'")
                    else:
                        logger.warning("√ó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

                    await asyncio.sleep(self.config.random_delay())
                    await sadcaptcha.solve_captcha_if_present()

                    # 2. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    logger.info("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
                    reply_text = random.choice(self.comments)
                    reply_success = await self._reply_to_comment(page, reply_text)

                    if reply_success:
                        logger.success(f"‚úì –£—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{reply_text}'")
                    else:
                        logger.warning("√ó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    try:
                        await page.screenshot(path=f"{account['email'].split('@')[0]}_cycle_{cycle}_after_comments.png")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")
                else:
                    logger.error("√ó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")

                # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ" —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
                clicks_count = random.randint(self.config.min_next_clicks, self.config.max_next_clicks)
                logger.info(f"–ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ' {clicks_count} —Ä–∞–∑")
                await self._click_next_button(page, clicks_count)

                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                await asyncio.sleep(self.config.random_delay())

            logger.success(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.config.cycles_per_account} —Ü–∏–∫–ª–æ–≤ –¥–ª—è {account['email']}{proxy_info}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
            logger.error(traceback.format_exc())
            return False

    async def _click_next_button(self, page, clicks_count=1):
        """–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ' —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑"""
        try:
            button_selectors = [
                "#app > div.css-1yczxwx-DivBodyContainer.e1irlpdw0 > div:nth-child(4) > div > div.css-1pzb4a7-DivPlayerErrorPlaceHolder.e1fz9kua0 > div > button.css-1s9jpf8-ButtonBasicButtonContainer-StyledVideoSwitch.e11s2kul11",
                "xpath=/html/body/div[1]/div[2]/div[3]/div/div[1]/div/button[2]",
                "button.css-1s9jpf8-ButtonBasicButtonContainer-StyledVideoSwitch",
                "[data-e2e='arrow-right']",
                "[aria-label='–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ']",
                "[aria-label='Next video']"
            ]

            success = False

            # –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript
            try:
                for _ in range(clicks_count):
                    result = await page.evaluate('''
                        const buttons = document.querySelectorAll(
                            'button.css-1s9jpf8-ButtonBasicButtonContainer-StyledVideoSwitch, ' +
                            '[data-e2e="arrow-right"], ' +
                            '[aria-label="–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ"], ' +
                            '[aria-label="Next video"]'
                        );

                        for (const btn of buttons) {
                            if (btn.getBoundingClientRect().width > 0) {
                                btn.click();
                                return true;
                            }
                        }

                        return false;
                    ''')

                    if result:
                        logger.debug("–ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞ —á–µ—Ä–µ–∑ JavaScript")
                        success = True
                        await asyncio.sleep(self.config.min_delay)
                    else:
                        break
            except Exception as js_error:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ JavaScript: {js_error}")

            # –ï—Å–ª–∏ JS –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            if not success:
                for selector in button_selectors:
                    try:
                        count = await page.locator(selector).count()
                        if count > 0:
                            for _ in range(clicks_count):
                                await page.locator(selector).first.click()
                                logger.debug(f"–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                                await asyncio.sleep(self.config.min_delay)
                            success = True
                            break
                    except Exception as e:
                        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")

            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –∫–ª–∞–≤–∏—à—É 'N'
            if not success:
                for _ in range(clicks_count):
                    await page.keyboard.press("n")
                    logger.debug("–ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ 'N' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–∏–¥–µ–æ")
                    await asyncio.sleep(self.config.min_delay)
                success = True

            return success
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ': {e}")
            return False

    async def _open_first_video(self, page):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ –≤ –ª–µ–Ω—Ç–µ For You"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JavaScript
            try:
                await page.evaluate('''
                    // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—ã–π –≤–∏–¥–µ–æ-—ç–ª–µ–º–µ–Ω—Ç –∏ –∫–ª–∏–∫–Ω–µ–º –ø–æ –Ω–µ–º—É
                    const videos = document.querySelectorAll('div[data-e2e="recommend-list-item-container"]');
                    if (videos.length > 0) {
                        videos[0].click();
                        return true;
                    }

                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ
                    const altVideos = document.querySelectorAll('.DivItemContainer, article, [data-e2e="user-post"], .tiktok-feed-item');
                    if (altVideos.length > 0) {
                        altVideos[0].click();
                        return true;
                    }

                    return false;
                ''')
                await asyncio.sleep(self.config.random_delay())
                return True
            except Exception as js_error:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ JavaScript: {js_error}")

            # –ï—Å–ª–∏ JS –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            video_selectors = [
                'div[data-e2e="recommend-list-item-container"]',
                'article',
                '[data-e2e="user-post"]',
                '.DivItemContainer',
                '.tiktok-feed-item'
            ]

            for selector in video_selectors:
                try:
                    count = await page.locator(selector).count()
                    if count > 0:
                        await page.locator(selector).first.click()
                        await asyncio.sleep(self.config.random_delay())
                        return True
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/–∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –≤–∏–¥–µ–æ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")

            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
            return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
            return False

    async def _open_comments(self, page):
        """–û—Ç–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ç–µ–∫—É—â–µ–º—É –≤–∏–¥–µ–æ"""
        try:
            # –ß–µ—Ä–µ–∑ JavaScript
            try:
                result = await page.evaluate('''
                    // –ù–∞–π–¥–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    const commentButtons = Array.from(document.querySelectorAll(
                        'span[data-e2e="comment-icon"], button[data-e2e="comment-icon"]'
                    ));

                    // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é –≤–∏–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É
                    for (const btn of commentButtons) {
                        const rect = btn.getBoundingClientRect();
                        if (rect.width > 0 && rect.height > 0) {
                            btn.click();
                            return true;
                        }
                    }

                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
                    const commentAttr = document.querySelector(
                        '[aria-label="–û—Ç–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"], [aria-label="Open comments"]'
                    );
                    if (commentAttr) {
                        commentAttr.click();
                        return true;
                    }

                    return false;
                ''')

                if result:
                    await asyncio.sleep(self.config.random_delay())
                    return True
            except Exception as js_error:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ JavaScript: {js_error}")

            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            comment_selectors = [
                'span[data-e2e="comment-icon"]',
                'button[data-e2e="comment-icon"]',
                '.comment-icon',
                '[aria-label="–û—Ç–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"]',
                '[aria-label="Open comments"]'
            ]

            for selector in comment_selectors:
                try:
                    count = await page.locator(selector).count()
                    if count > 0:
                        await page.locator(selector).first.click()
                        await asyncio.sleep(self.config.random_delay())
                        return True
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/–Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")

            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–ª–∞–≤–∏—à—É "C"
            try:
                await page.keyboard.press("c")
                await asyncio.sleep(self.config.random_delay())
                return True
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —à–æ—Ä—Ç–∫–∞—Ç–∞: {e}")

            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            return False

    async def _post_comment(self, page, comment_text):
        """–û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        try:
            # –ù–∞–π–¥–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            input_selectors = [
                'div[contenteditable="true"]',
                '[data-e2e="comment-input"]',
                'div[role="textbox"]',
                '.public-DraftEditor-content',
                '[placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."]',
                '[placeholder="Add comment..."]'
            ]

            for selector in input_selectors:
                try:
                    count = await page.locator(selector).count()
                    if count > 0:
                        # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                        input_field = page.locator(selector).first
                        await input_field.click()
                        await asyncio.sleep(self.config.min_delay)

                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
                        try:
                            await input_field.fill(comment_text)
                        except Exception:
                            try:
                                await input_field.type(comment_text)
                            except Exception:
                                await page.keyboard.type(comment_text)

                        await asyncio.sleep(self.config.min_delay)

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        post_success = False

                        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                        post_selectors = [
                            '[data-e2e="comment-post-btn"]',
                            'button.css-fdy45n-DivPostButton',
                            'button.css-1gjo2yl-DivPostButton',
                            'div[role="button"]:has-text("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")',
                            'div[role="button"]:has-text("Post")'
                        ]

                        for post_selector in post_selectors:
                            try:
                                post_count = await page.locator(post_selector).count()
                                if post_count > 0:
                                    await page.locator(post_selector).first.click()
                                    post_success = True
                                    break
                            except Exception:
                                continue

                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É, –ø—Ä–æ–±—É–µ–º Enter
                        if not post_success:
                            await page.keyboard.press("Enter")

                        await asyncio.sleep(self.config.random_delay())
                        return True
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞, –ø—Ä–æ–±—É–µ–º Tab –∏ –≤–≤–æ–¥
            await page.keyboard.press("Tab")
            await asyncio.sleep(self.config.min_delay)
            await page.keyboard.type(comment_text)
            await asyncio.sleep(0.1)
            await page.keyboard.press("Enter")
            await asyncio.sleep(self.config.random_delay())

            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return False

    async def _reply_to_comment(self, page, reply_text):
        """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        try:
            # –ü—Ä–æ–∫—Ä—É—Ç–∏–º –ø–∞–Ω–µ–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            try:
                await page.mouse.wheel(0, random.randint(200, 300))
                await asyncio.sleep(self.config.min_delay)
            except Exception:
                pass

            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
            reply_selectors = [
                'span:has-text("–û—Ç–≤–µ—Ç–∏—Ç—å")',
                'span:has-text("Reply")',
                'span.css-cpmlpt-SpanReplyButton',
                '[data-e2e="comment-reply-btn"]'
            ]

            for selector in reply_selectors:
                try:
                    count = await page.locator(selector).count()
                    if count > 0:
                        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ
                        index = random.randint(0, min(count - 1, 5))  # –ü–µ—Ä–≤—ã–µ 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                        reply_button = page.locator(selector).nth(index)

                        if await reply_button.is_visible():
                            await reply_button.click()
                            await asyncio.sleep(self.config.random_delay())

                            # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                            input_selectors = [
                                'div[contenteditable="true"]',
                                '[data-e2e="comment-input"]',
                                'div[role="textbox"]'
                            ]

                            for input_selector in input_selectors:
                                try:
                                    input_count = await page.locator(input_selector).count()
                                    if input_count > 0:
                                        input_field = page.locator(input_selector).first

                                        await input_field.click()
                                        await asyncio.sleep(self.config.min_delay)

                                        try:
                                            await input_field.fill(reply_text)
                                        except Exception:
                                            try:
                                                await input_field.type(reply_text)
                                            except Exception:
                                                await page.keyboard.type(reply_text)

                                        await asyncio.sleep(self.config.min_delay)

                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                                        post_success = False
                                        post_selectors = [
                                            '[data-e2e="comment-post-btn"]',
                                            'button.css-fdy45n-DivPostButton',
                                            'div[role="button"]:has-text("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")',
                                            'div[role="button"]:has-text("Post")'
                                        ]

                                        for post_selector in post_selectors:
                                            try:
                                                post_count = await page.locator(post_selector).count()
                                                if post_count > 0:
                                                    await page.locator(post_selector).first.click()
                                                    post_success = True
                                                    break
                                            except Exception:
                                                continue

                                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É, –ø—Ä–æ–±—É–µ–º Enter
                                        if not post_success:
                                            await page.keyboard.press("Enter")

                                        await asyncio.sleep(self.config.random_delay())
                                        return True
                                except Exception as e:
                                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {input_selector}: {e}")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å", –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment_selectors = [
                'div.comment-item',
                '.DivCommentItemContainer',
                '[data-e2e="comment-item"]'
            ]

            for selector in comment_selectors:
                try:
                    count = await page.locator(selector).count()
                    if count > 0:
                        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –ø–µ—Ä–≤—ã—Ö 5
                        index = random.randint(0, min(count - 1, 5))
                        comment = page.locator(selector).nth(index)

                        await comment.click()
                        await asyncio.sleep(self.config.min_delay)

                        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–≤–µ—Ç–∞ —Ä—è–¥–æ–º —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
                        reply_texts = ["–û—Ç–≤–µ—Ç–∏—Ç—å", "Reply"]
                        for text in reply_texts:
                            try:
                                await page.get_by_text(text, exact=True).click()
                                await asyncio.sleep(self.config.min_delay)

                                # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
                                await page.keyboard.type(reply_text)
                                await asyncio.sleep(self.config.min_delay)
                                await page.keyboard.press("Enter")
                                await asyncio.sleep(self.config.random_delay())
                                return True
                            except Exception:
                                pass
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")

            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {e}")
            return False

    async def close_session(self, session_data):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if session_data:
                if "browser" in session_data:
                    await session_data["browser"].close()
                if "playwright" in session_data:
                    await session_data["playwright"].stop()
                proxy_info = f" (–ü—Ä–æ–∫—Å–∏: {session_data['proxy']['server']})" if 'proxy' in session_data and \
                                                                                session_data['proxy'] else ""
                logger.info(f"–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è {session_data['account']['email']}{proxy_info}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")

    async def process_account(self, account, proxy=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            # –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç
            session_data = await self.login(account, proxy)

            if session_data:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
                await self.process_videos(session_data)

                # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏
                await self.close_session(session_data)
                return True
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {account['email']}")
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account['email']}: {e}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = BotConfig()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(f"tiktok_bot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log", level="INFO")
    logger.add(
        lambda msg: print(msg, end=""),
        level="INFO",
        format="{time:HH:mm:ss} | <level>{message}</level>"
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = TikTokBot(config)

    # –ß—Ç–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–∫—Å–∏
    file_handler = FileHandler(config)
    accounts = file_handler.read_accounts()
    proxies = file_handler.read_proxies()

    if not accounts:
        logger.error("–ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Ñ–∞–π–ª acc.txt")
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
    semaphore = asyncio.Semaphore(config.max_concurrent_accounts)

    async def process_with_semaphore(account, proxy=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ —Å–µ–º–∞—Ñ–æ—Ä—É"""
        async with semaphore:
            start_time = datetime.now()
            result = await bot.process_account(account, proxy)
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            proxy_info = f" (–ü—Ä–æ–∫—Å–∏: {proxy['server']})" if proxy else ""
            logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {account['email']}{proxy_info} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {duration:.1f} —Å–µ–∫")
            return result

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    tasks = []
    for i, account in enumerate(accounts):
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–∫—Å–∏, –Ω–∞–∑–Ω–∞—á–∞–µ–º –∏—Ö –∞–∫–∫–∞—É–Ω—Ç–∞–º –ø–æ –∫—Ä—É–≥—É
        proxy = None
        if proxies:
            proxy = proxies[i % len(proxies)]
        tasks.append(process_with_semaphore(account, proxy))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    results = await asyncio.gather(*tasks, return_exceptions=True)

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    success_count = sum(1 for result in results if result is True)
    logger.info(f"–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}, —É—Å–ø–µ—à–Ω–æ: {success_count}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.warning("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.critical(traceback.format_exc())